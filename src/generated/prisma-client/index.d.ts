// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostStatus = "PUBLISHED" | "DRAFT" | "DELETED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "socialId_ASC"
  | "socialId_DESC"
  | "fname_ASC"
  | "fname_DESC"
  | "lname_ASC"
  | "lname_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "profilePicture_ASC"
  | "profilePicture_DESC"
  | "signUpMethod_ASC"
  | "signUpMethod_DESC"
  | "accessToken_ASC"
  | "accessToken_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "editorSerializedOutput_ASC"
  | "editorSerializedOutput_DESC"
  | "editorCurrentContent_ASC"
  | "editorCurrentContent_DESC"
  | "editorHtml_ASC"
  | "editorHtml_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "status_ASC"
  | "status_DESC";

export type Previledge =
  | "SUPERADMIN"
  | "ADMIN"
  | "MODERATOR"
  | "AUTHOR"
  | "READER";

export type Category =
  | "TECH"
  | "FIN"
  | "DIGIMARK"
  | "CODING"
  | "TUTORIAL"
  | "HOWTO"
  | "WRITING"
  | "INSPIRE"
  | "SCIENCE"
  | "POLITICS"
  | "LIFESTYLE"
  | "FOOD"
  | "BUSSINESS"
  | "ENTREPRENEUR"
  | "HISTORY"
  | "HEALTH"
  | "PET"
  | "PARENTHOOD"
  | "TRAVEL"
  | "INDIA"
  | "CHINA"
  | "US"
  | "UK"
  | "WORLD"
  | "NEWS"
  | "REVIEW";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  socialId?: String;
  socialId_not?: String;
  socialId_in?: String[] | String;
  socialId_not_in?: String[] | String;
  socialId_lt?: String;
  socialId_lte?: String;
  socialId_gt?: String;
  socialId_gte?: String;
  socialId_contains?: String;
  socialId_not_contains?: String;
  socialId_starts_with?: String;
  socialId_not_starts_with?: String;
  socialId_ends_with?: String;
  socialId_not_ends_with?: String;
  fname?: String;
  fname_not?: String;
  fname_in?: String[] | String;
  fname_not_in?: String[] | String;
  fname_lt?: String;
  fname_lte?: String;
  fname_gt?: String;
  fname_gte?: String;
  fname_contains?: String;
  fname_not_contains?: String;
  fname_starts_with?: String;
  fname_not_starts_with?: String;
  fname_ends_with?: String;
  fname_not_ends_with?: String;
  lname?: String;
  lname_not?: String;
  lname_in?: String[] | String;
  lname_not_in?: String[] | String;
  lname_lt?: String;
  lname_lte?: String;
  lname_gt?: String;
  lname_gte?: String;
  lname_contains?: String;
  lname_not_contains?: String;
  lname_starts_with?: String;
  lname_not_starts_with?: String;
  lname_ends_with?: String;
  lname_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  birthday?: String;
  birthday_not?: String;
  birthday_in?: String[] | String;
  birthday_not_in?: String[] | String;
  birthday_lt?: String;
  birthday_lte?: String;
  birthday_gt?: String;
  birthday_gte?: String;
  birthday_contains?: String;
  birthday_not_contains?: String;
  birthday_starts_with?: String;
  birthday_not_starts_with?: String;
  birthday_ends_with?: String;
  birthday_not_ends_with?: String;
  bio?: String;
  bio_not?: String;
  bio_in?: String[] | String;
  bio_not_in?: String[] | String;
  bio_lt?: String;
  bio_lte?: String;
  bio_gt?: String;
  bio_gte?: String;
  bio_contains?: String;
  bio_not_contains?: String;
  bio_starts_with?: String;
  bio_not_starts_with?: String;
  bio_ends_with?: String;
  bio_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  profilePicture?: String;
  profilePicture_not?: String;
  profilePicture_in?: String[] | String;
  profilePicture_not_in?: String[] | String;
  profilePicture_lt?: String;
  profilePicture_lte?: String;
  profilePicture_gt?: String;
  profilePicture_gte?: String;
  profilePicture_contains?: String;
  profilePicture_not_contains?: String;
  profilePicture_starts_with?: String;
  profilePicture_not_starts_with?: String;
  profilePicture_ends_with?: String;
  profilePicture_not_ends_with?: String;
  followers_every?: UserWhereInput;
  followers_some?: UserWhereInput;
  followers_none?: UserWhereInput;
  signUpMethod?: String;
  signUpMethod_not?: String;
  signUpMethod_in?: String[] | String;
  signUpMethod_not_in?: String[] | String;
  signUpMethod_lt?: String;
  signUpMethod_lte?: String;
  signUpMethod_gt?: String;
  signUpMethod_gte?: String;
  signUpMethod_contains?: String;
  signUpMethod_not_contains?: String;
  signUpMethod_starts_with?: String;
  signUpMethod_not_starts_with?: String;
  signUpMethod_ends_with?: String;
  signUpMethod_not_ends_with?: String;
  accessToken?: String;
  accessToken_not?: String;
  accessToken_in?: String[] | String;
  accessToken_not_in?: String[] | String;
  accessToken_lt?: String;
  accessToken_lte?: String;
  accessToken_gt?: String;
  accessToken_gte?: String;
  accessToken_contains?: String;
  accessToken_not_contains?: String;
  accessToken_starts_with?: String;
  accessToken_not_starts_with?: String;
  accessToken_ends_with?: String;
  accessToken_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  editorHtml?: String;
  editorHtml_not?: String;
  editorHtml_in?: String[] | String;
  editorHtml_not_in?: String[] | String;
  editorHtml_lt?: String;
  editorHtml_lte?: String;
  editorHtml_gt?: String;
  editorHtml_gte?: String;
  editorHtml_contains?: String;
  editorHtml_not_contains?: String;
  editorHtml_starts_with?: String;
  editorHtml_not_starts_with?: String;
  editorHtml_ends_with?: String;
  editorHtml_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  author_every?: UserWhereInput;
  author_some?: UserWhereInput;
  author_none?: UserWhereInput;
  status?: PostStatus;
  status_not?: PostStatus;
  status_in?: PostStatus[] | PostStatus;
  status_not_in?: PostStatus[] | PostStatus;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  socialId?: String;
  phone?: String;
  email?: String;
}>;

export interface PostCreateInput {
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  editorHtml: String;
  author?: UserCreateManyWithoutPostsInput;
  categories?: PostCreatecategoriesInput;
  thumbnail: Json;
  status: PostStatus;
}

export interface UserCreateManyWithoutPostsInput {
  create?: UserCreateWithoutPostsInput[] | UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  socialId: String;
  fname: String;
  lname: String;
  name: String;
  phone?: String;
  email: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  profilePicture: String;
  followers?: UserCreateManyInput;
  previledge?: UserCreatepreviledgeInput;
  signUpMethod: String;
  accessToken: String;
}

export interface UserCreateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateInput {
  socialId: String;
  fname: String;
  lname: String;
  name: String;
  phone?: String;
  email: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  posts?: PostCreateManyWithoutAuthorInput;
  profilePicture: String;
  followers?: UserCreateManyInput;
  previledge?: UserCreatepreviledgeInput;
  signUpMethod: String;
  accessToken: String;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutAuthorInput {
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  editorHtml: String;
  categories?: PostCreatecategoriesInput;
  thumbnail: Json;
  status: PostStatus;
}

export interface PostCreatecategoriesInput {
  set?: Category[] | Category;
}

export interface UserCreatepreviledgeInput {
  set?: Previledge[] | Previledge;
}

export interface PostUpdateInput {
  title?: String;
  editorSerializedOutput?: Json;
  editorCurrentContent?: Json;
  editorHtml?: String;
  author?: UserUpdateManyWithoutPostsInput;
  categories?: PostUpdatecategoriesInput;
  thumbnail?: Json;
  status?: PostStatus;
}

export interface UserUpdateManyWithoutPostsInput {
  create?: UserCreateWithoutPostsInput[] | UserCreateWithoutPostsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutPostsInput[]
    | UserUpdateWithWhereUniqueWithoutPostsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutPostsInput[]
    | UserUpsertWithWhereUniqueWithoutPostsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutPostsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPostsDataInput;
}

export interface UserUpdateWithoutPostsDataInput {
  socialId?: String;
  fname?: String;
  lname?: String;
  name?: String;
  phone?: String;
  email?: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  profilePicture?: String;
  followers?: UserUpdateManyInput;
  previledge?: UserUpdatepreviledgeInput;
  signUpMethod?: String;
  accessToken?: String;
}

export interface UserUpdateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  update?:
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput;
  upsert?:
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  socialId?: String;
  fname?: String;
  lname?: String;
  name?: String;
  phone?: String;
  email?: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  profilePicture?: String;
  followers?: UserUpdateManyInput;
  previledge?: UserUpdatepreviledgeInput;
  signUpMethod?: String;
  accessToken?: String;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: String;
  editorSerializedOutput?: Json;
  editorCurrentContent?: Json;
  editorHtml?: String;
  categories?: PostUpdatecategoriesInput;
  thumbnail?: Json;
  status?: PostStatus;
}

export interface PostUpdatecategoriesInput {
  set?: Category[] | Category;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  editorHtml?: String;
  editorHtml_not?: String;
  editorHtml_in?: String[] | String;
  editorHtml_not_in?: String[] | String;
  editorHtml_lt?: String;
  editorHtml_lte?: String;
  editorHtml_gt?: String;
  editorHtml_gte?: String;
  editorHtml_contains?: String;
  editorHtml_not_contains?: String;
  editorHtml_starts_with?: String;
  editorHtml_not_starts_with?: String;
  editorHtml_ends_with?: String;
  editorHtml_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  status?: PostStatus;
  status_not?: PostStatus;
  status_in?: PostStatus[] | PostStatus;
  status_not_in?: PostStatus[] | PostStatus;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: String;
  editorSerializedOutput?: Json;
  editorCurrentContent?: Json;
  editorHtml?: String;
  categories?: PostUpdatecategoriesInput;
  thumbnail?: Json;
  status?: PostStatus;
}

export interface UserUpdatepreviledgeInput {
  set?: Previledge[] | Previledge;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  socialId?: String;
  socialId_not?: String;
  socialId_in?: String[] | String;
  socialId_not_in?: String[] | String;
  socialId_lt?: String;
  socialId_lte?: String;
  socialId_gt?: String;
  socialId_gte?: String;
  socialId_contains?: String;
  socialId_not_contains?: String;
  socialId_starts_with?: String;
  socialId_not_starts_with?: String;
  socialId_ends_with?: String;
  socialId_not_ends_with?: String;
  fname?: String;
  fname_not?: String;
  fname_in?: String[] | String;
  fname_not_in?: String[] | String;
  fname_lt?: String;
  fname_lte?: String;
  fname_gt?: String;
  fname_gte?: String;
  fname_contains?: String;
  fname_not_contains?: String;
  fname_starts_with?: String;
  fname_not_starts_with?: String;
  fname_ends_with?: String;
  fname_not_ends_with?: String;
  lname?: String;
  lname_not?: String;
  lname_in?: String[] | String;
  lname_not_in?: String[] | String;
  lname_lt?: String;
  lname_lte?: String;
  lname_gt?: String;
  lname_gte?: String;
  lname_contains?: String;
  lname_not_contains?: String;
  lname_starts_with?: String;
  lname_not_starts_with?: String;
  lname_ends_with?: String;
  lname_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  gender?: String;
  gender_not?: String;
  gender_in?: String[] | String;
  gender_not_in?: String[] | String;
  gender_lt?: String;
  gender_lte?: String;
  gender_gt?: String;
  gender_gte?: String;
  gender_contains?: String;
  gender_not_contains?: String;
  gender_starts_with?: String;
  gender_not_starts_with?: String;
  gender_ends_with?: String;
  gender_not_ends_with?: String;
  birthday?: String;
  birthday_not?: String;
  birthday_in?: String[] | String;
  birthday_not_in?: String[] | String;
  birthday_lt?: String;
  birthday_lte?: String;
  birthday_gt?: String;
  birthday_gte?: String;
  birthday_contains?: String;
  birthday_not_contains?: String;
  birthday_starts_with?: String;
  birthday_not_starts_with?: String;
  birthday_ends_with?: String;
  birthday_not_ends_with?: String;
  bio?: String;
  bio_not?: String;
  bio_in?: String[] | String;
  bio_not_in?: String[] | String;
  bio_lt?: String;
  bio_lte?: String;
  bio_gt?: String;
  bio_gte?: String;
  bio_contains?: String;
  bio_not_contains?: String;
  bio_starts_with?: String;
  bio_not_starts_with?: String;
  bio_ends_with?: String;
  bio_not_ends_with?: String;
  profilePicture?: String;
  profilePicture_not?: String;
  profilePicture_in?: String[] | String;
  profilePicture_not_in?: String[] | String;
  profilePicture_lt?: String;
  profilePicture_lte?: String;
  profilePicture_gt?: String;
  profilePicture_gte?: String;
  profilePicture_contains?: String;
  profilePicture_not_contains?: String;
  profilePicture_starts_with?: String;
  profilePicture_not_starts_with?: String;
  profilePicture_ends_with?: String;
  profilePicture_not_ends_with?: String;
  signUpMethod?: String;
  signUpMethod_not?: String;
  signUpMethod_in?: String[] | String;
  signUpMethod_not_in?: String[] | String;
  signUpMethod_lt?: String;
  signUpMethod_lte?: String;
  signUpMethod_gt?: String;
  signUpMethod_gte?: String;
  signUpMethod_contains?: String;
  signUpMethod_not_contains?: String;
  signUpMethod_starts_with?: String;
  signUpMethod_not_starts_with?: String;
  signUpMethod_ends_with?: String;
  signUpMethod_not_ends_with?: String;
  accessToken?: String;
  accessToken_not?: String;
  accessToken_in?: String[] | String;
  accessToken_not_in?: String[] | String;
  accessToken_lt?: String;
  accessToken_lte?: String;
  accessToken_gt?: String;
  accessToken_gte?: String;
  accessToken_contains?: String;
  accessToken_not_contains?: String;
  accessToken_starts_with?: String;
  accessToken_not_starts_with?: String;
  accessToken_ends_with?: String;
  accessToken_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  socialId?: String;
  fname?: String;
  lname?: String;
  name?: String;
  phone?: String;
  email?: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  profilePicture?: String;
  previledge?: UserUpdatepreviledgeInput;
  signUpMethod?: String;
  accessToken?: String;
}

export interface UserUpsertWithWhereUniqueWithoutPostsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  title?: String;
  editorSerializedOutput?: Json;
  editorCurrentContent?: Json;
  editorHtml?: String;
  categories?: PostUpdatecategoriesInput;
  thumbnail?: Json;
  status?: PostStatus;
}

export interface UserUpdateInput {
  socialId?: String;
  fname?: String;
  lname?: String;
  name?: String;
  phone?: String;
  email?: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
  profilePicture?: String;
  followers?: UserUpdateManyInput;
  previledge?: UserUpdatepreviledgeInput;
  signUpMethod?: String;
  accessToken?: String;
}

export interface UserUpdateManyMutationInput {
  socialId?: String;
  fname?: String;
  lname?: String;
  name?: String;
  phone?: String;
  email?: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  profilePicture?: String;
  previledge?: UserUpdatepreviledgeInput;
  signUpMethod?: String;
  accessToken?: String;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Post {
  id: ID_Output;
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  editorHtml: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  categories: Category[];
  thumbnail: Json;
  status: PostStatus;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  editorSerializedOutput: () => Promise<Json>;
  editorCurrentContent: () => Promise<Json>;
  editorHtml: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  author: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  categories: () => Promise<Category[]>;
  thumbnail: () => Promise<Json>;
  status: () => Promise<PostStatus>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  editorSerializedOutput: () => Promise<AsyncIterator<Json>>;
  editorCurrentContent: () => Promise<AsyncIterator<Json>>;
  editorHtml: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  categories: () => Promise<AsyncIterator<Category[]>>;
  thumbnail: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<PostStatus>>;
}

export interface User {
  id: ID_Output;
  socialId: String;
  fname: String;
  lname: String;
  name: String;
  phone?: String;
  email: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  profilePicture: String;
  previledge: Previledge[];
  signUpMethod: String;
  accessToken: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  socialId: () => Promise<String>;
  fname: () => Promise<String>;
  lname: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  gender: () => Promise<String>;
  birthday: () => Promise<String>;
  bio: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  profilePicture: () => Promise<String>;
  followers: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  previledge: () => Promise<Previledge[]>;
  signUpMethod: () => Promise<String>;
  accessToken: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  socialId: () => Promise<AsyncIterator<String>>;
  fname: () => Promise<AsyncIterator<String>>;
  lname: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  profilePicture: () => Promise<AsyncIterator<String>>;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  previledge: () => Promise<AsyncIterator<Previledge[]>>;
  signUpMethod: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  editorHtml: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  categories: Category[];
  thumbnail: Json;
  status: PostStatus;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  editorSerializedOutput: () => Promise<Json>;
  editorCurrentContent: () => Promise<Json>;
  editorHtml: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  categories: () => Promise<Category[]>;
  thumbnail: () => Promise<Json>;
  status: () => Promise<PostStatus>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  editorSerializedOutput: () => Promise<AsyncIterator<Json>>;
  editorCurrentContent: () => Promise<AsyncIterator<Json>>;
  editorHtml: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  categories: () => Promise<AsyncIterator<Category[]>>;
  thumbnail: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<PostStatus>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  socialId: String;
  fname: String;
  lname: String;
  name: String;
  phone?: String;
  email: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  profilePicture: String;
  previledge: Previledge[];
  signUpMethod: String;
  accessToken: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  socialId: () => Promise<String>;
  fname: () => Promise<String>;
  lname: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  gender: () => Promise<String>;
  birthday: () => Promise<String>;
  bio: () => Promise<String>;
  profilePicture: () => Promise<String>;
  previledge: () => Promise<Previledge[]>;
  signUpMethod: () => Promise<String>;
  accessToken: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  socialId: () => Promise<AsyncIterator<String>>;
  fname: () => Promise<AsyncIterator<String>>;
  lname: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  previledge: () => Promise<AsyncIterator<Previledge[]>>;
  signUpMethod: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Json = any;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Previledge",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "PostStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
