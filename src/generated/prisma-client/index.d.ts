// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  upvote: (where?: UpvoteWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  upvote: (where: UpvoteWhereUniqueInput) => UpvoteNullablePromise;
  upvotes: (args?: {
    where?: UpvoteWhereInput;
    orderBy?: UpvoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Upvote>;
  upvotesConnection: (args?: {
    where?: UpvoteWhereInput;
    orderBy?: UpvoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UpvoteConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUpvote: (data: UpvoteCreateInput) => UpvotePromise;
  updateUpvote: (args: {
    data: UpvoteUpdateInput;
    where: UpvoteWhereUniqueInput;
  }) => UpvotePromise;
  upsertUpvote: (args: {
    where: UpvoteWhereUniqueInput;
    create: UpvoteCreateInput;
    update: UpvoteUpdateInput;
  }) => UpvotePromise;
  deleteUpvote: (where: UpvoteWhereUniqueInput) => UpvotePromise;
  deleteManyUpvotes: (where?: UpvoteWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  upvote: (
    where?: UpvoteSubscriptionWhereInput
  ) => UpvoteSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CategoryEnum =
  | "TECH"
  | "FIN"
  | "DIGIMARK"
  | "CODING"
  | "TUTORIAL"
  | "HOWTO"
  | "WRITING"
  | "INSPIRE"
  | "SCIENCE"
  | "POLITICS"
  | "LIFESTYLE"
  | "FOOD"
  | "BUSSINESS"
  | "ENTREPRENEUR"
  | "HISTORY"
  | "HEALTH"
  | "PET"
  | "PARENTHOOD"
  | "TRAVEL"
  | "INDIA"
  | "CHINA"
  | "US"
  | "UK"
  | "WORLD"
  | "NEWS"
  | "REVIEW"
  | "ART"
  | "CULTURE"
  | "STORY";

export type PostStatus = "PUBLISHED" | "DRAFT" | "DELETED";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "editorSerializedOutput_ASC"
  | "editorSerializedOutput_DESC"
  | "editorCurrentContent_ASC"
  | "editorCurrentContent_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "publishedAt_ASC"
  | "publishedAt_DESC"
  | "upvotesNumber_ASC"
  | "upvotesNumber_DESC"
  | "authorId_ASC"
  | "authorId_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "status_ASC"
  | "status_DESC"
  | "slug_ASC"
  | "slug_DESC";

export type UpvoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "socialId_ASC"
  | "socialId_DESC"
  | "fname_ASC"
  | "fname_DESC"
  | "lname_ASC"
  | "lname_DESC"
  | "username_ASC"
  | "username_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "profilePicture_ASC"
  | "profilePicture_DESC"
  | "signUpMethod_ASC"
  | "signUpMethod_DESC"
  | "accessToken_ASC"
  | "accessToken_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type Previledge =
  | "SUPERADMIN"
  | "ADMIN"
  | "MODERATOR"
  | "VERIFIED"
  | "AUTHOR"
  | "READER";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "category_ASC"
  | "category_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  category?: Maybe<CategoryEnum>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  publishedAt?: Maybe<DateTimeInput>;
  publishedAt_not?: Maybe<DateTimeInput>;
  publishedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_lt?: Maybe<DateTimeInput>;
  publishedAt_lte?: Maybe<DateTimeInput>;
  publishedAt_gt?: Maybe<DateTimeInput>;
  publishedAt_gte?: Maybe<DateTimeInput>;
  upvotes_every?: Maybe<UpvoteWhereInput>;
  upvotes_some?: Maybe<UpvoteWhereInput>;
  upvotes_none?: Maybe<UpvoteWhereInput>;
  upvotesNumber?: Maybe<Int>;
  upvotesNumber_not?: Maybe<Int>;
  upvotesNumber_in?: Maybe<Int[] | Int>;
  upvotesNumber_not_in?: Maybe<Int[] | Int>;
  upvotesNumber_lt?: Maybe<Int>;
  upvotesNumber_lte?: Maybe<Int>;
  upvotesNumber_gt?: Maybe<Int>;
  upvotesNumber_gte?: Maybe<Int>;
  author?: Maybe<UserWhereInput>;
  authorId?: Maybe<String>;
  authorId_not?: Maybe<String>;
  authorId_in?: Maybe<String[] | String>;
  authorId_not_in?: Maybe<String[] | String>;
  authorId_lt?: Maybe<String>;
  authorId_lte?: Maybe<String>;
  authorId_gt?: Maybe<String>;
  authorId_gte?: Maybe<String>;
  authorId_contains?: Maybe<String>;
  authorId_not_contains?: Maybe<String>;
  authorId_starts_with?: Maybe<String>;
  authorId_not_starts_with?: Maybe<String>;
  authorId_ends_with?: Maybe<String>;
  authorId_not_ends_with?: Maybe<String>;
  categories_every?: Maybe<CategoryWhereInput>;
  categories_some?: Maybe<CategoryWhereInput>;
  categories_none?: Maybe<CategoryWhereInput>;
  status?: Maybe<PostStatus>;
  status_not?: Maybe<PostStatus>;
  status_in?: Maybe<PostStatus[] | PostStatus>;
  status_not_in?: Maybe<PostStatus[] | PostStatus>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UpvoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UpvoteWhereInput[] | UpvoteWhereInput>;
  OR?: Maybe<UpvoteWhereInput[] | UpvoteWhereInput>;
  NOT?: Maybe<UpvoteWhereInput[] | UpvoteWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  socialId?: Maybe<String>;
  socialId_not?: Maybe<String>;
  socialId_in?: Maybe<String[] | String>;
  socialId_not_in?: Maybe<String[] | String>;
  socialId_lt?: Maybe<String>;
  socialId_lte?: Maybe<String>;
  socialId_gt?: Maybe<String>;
  socialId_gte?: Maybe<String>;
  socialId_contains?: Maybe<String>;
  socialId_not_contains?: Maybe<String>;
  socialId_starts_with?: Maybe<String>;
  socialId_not_starts_with?: Maybe<String>;
  socialId_ends_with?: Maybe<String>;
  socialId_not_ends_with?: Maybe<String>;
  fname?: Maybe<String>;
  fname_not?: Maybe<String>;
  fname_in?: Maybe<String[] | String>;
  fname_not_in?: Maybe<String[] | String>;
  fname_lt?: Maybe<String>;
  fname_lte?: Maybe<String>;
  fname_gt?: Maybe<String>;
  fname_gte?: Maybe<String>;
  fname_contains?: Maybe<String>;
  fname_not_contains?: Maybe<String>;
  fname_starts_with?: Maybe<String>;
  fname_not_starts_with?: Maybe<String>;
  fname_ends_with?: Maybe<String>;
  fname_not_ends_with?: Maybe<String>;
  lname?: Maybe<String>;
  lname_not?: Maybe<String>;
  lname_in?: Maybe<String[] | String>;
  lname_not_in?: Maybe<String[] | String>;
  lname_lt?: Maybe<String>;
  lname_lte?: Maybe<String>;
  lname_gt?: Maybe<String>;
  lname_gte?: Maybe<String>;
  lname_contains?: Maybe<String>;
  lname_not_contains?: Maybe<String>;
  lname_starts_with?: Maybe<String>;
  lname_not_starts_with?: Maybe<String>;
  lname_ends_with?: Maybe<String>;
  lname_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  birthday?: Maybe<String>;
  birthday_not?: Maybe<String>;
  birthday_in?: Maybe<String[] | String>;
  birthday_not_in?: Maybe<String[] | String>;
  birthday_lt?: Maybe<String>;
  birthday_lte?: Maybe<String>;
  birthday_gt?: Maybe<String>;
  birthday_gte?: Maybe<String>;
  birthday_contains?: Maybe<String>;
  birthday_not_contains?: Maybe<String>;
  birthday_starts_with?: Maybe<String>;
  birthday_not_starts_with?: Maybe<String>;
  birthday_ends_with?: Maybe<String>;
  birthday_not_ends_with?: Maybe<String>;
  upvotes_every?: Maybe<UpvoteWhereInput>;
  upvotes_some?: Maybe<UpvoteWhereInput>;
  upvotes_none?: Maybe<UpvoteWhereInput>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  profilePicture?: Maybe<String>;
  profilePicture_not?: Maybe<String>;
  profilePicture_in?: Maybe<String[] | String>;
  profilePicture_not_in?: Maybe<String[] | String>;
  profilePicture_lt?: Maybe<String>;
  profilePicture_lte?: Maybe<String>;
  profilePicture_gt?: Maybe<String>;
  profilePicture_gte?: Maybe<String>;
  profilePicture_contains?: Maybe<String>;
  profilePicture_not_contains?: Maybe<String>;
  profilePicture_starts_with?: Maybe<String>;
  profilePicture_not_starts_with?: Maybe<String>;
  profilePicture_ends_with?: Maybe<String>;
  profilePicture_not_ends_with?: Maybe<String>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  signUpMethod?: Maybe<String>;
  signUpMethod_not?: Maybe<String>;
  signUpMethod_in?: Maybe<String[] | String>;
  signUpMethod_not_in?: Maybe<String[] | String>;
  signUpMethod_lt?: Maybe<String>;
  signUpMethod_lte?: Maybe<String>;
  signUpMethod_gt?: Maybe<String>;
  signUpMethod_gte?: Maybe<String>;
  signUpMethod_contains?: Maybe<String>;
  signUpMethod_not_contains?: Maybe<String>;
  signUpMethod_starts_with?: Maybe<String>;
  signUpMethod_not_starts_with?: Maybe<String>;
  signUpMethod_ends_with?: Maybe<String>;
  signUpMethod_not_ends_with?: Maybe<String>;
  accessToken?: Maybe<String>;
  accessToken_not?: Maybe<String>;
  accessToken_in?: Maybe<String[] | String>;
  accessToken_not_in?: Maybe<String[] | String>;
  accessToken_lt?: Maybe<String>;
  accessToken_lte?: Maybe<String>;
  accessToken_gt?: Maybe<String>;
  accessToken_gte?: Maybe<String>;
  accessToken_contains?: Maybe<String>;
  accessToken_not_contains?: Maybe<String>;
  accessToken_starts_with?: Maybe<String>;
  accessToken_not_starts_with?: Maybe<String>;
  accessToken_ends_with?: Maybe<String>;
  accessToken_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  category?: Maybe<CategoryEnum>;
  category_not?: Maybe<CategoryEnum>;
  category_in?: Maybe<CategoryEnum[] | CategoryEnum>;
  category_not_in?: Maybe<CategoryEnum[] | CategoryEnum>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UpvoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  socialId?: Maybe<String>;
  username?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  category: CategoryEnum;
  posts?: Maybe<PostCreateManyWithoutCategoriesInput>;
}

export interface PostCreateManyWithoutCategoriesInput {
  create?: Maybe<
    PostCreateWithoutCategoriesInput[] | PostCreateWithoutCategoriesInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutCategoriesInput {
  id?: Maybe<ID_Input>;
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  publishedAt?: Maybe<DateTimeInput>;
  upvotes?: Maybe<UpvoteCreateManyWithoutPostInput>;
  upvotesNumber?: Maybe<Int>;
  author?: Maybe<UserCreateOneWithoutPostsInput>;
  authorId: String;
  thumbnail: Json;
  status: PostStatus;
  slug: String;
}

export interface UpvoteCreateManyWithoutPostInput {
  create?: Maybe<UpvoteCreateWithoutPostInput[] | UpvoteCreateWithoutPostInput>;
  connect?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
}

export interface UpvoteCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutUpvotesInput;
}

export interface UserCreateOneWithoutUpvotesInput {
  create?: Maybe<UserCreateWithoutUpvotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutUpvotesInput {
  id?: Maybe<ID_Input>;
  socialId: String;
  fname: String;
  lname: String;
  username: String;
  name: String;
  phone?: Maybe<String>;
  email: String;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  bio?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  profilePicture: String;
  followers?: Maybe<UserCreateManyInput>;
  previledge?: Maybe<UserCreatepreviledgeInput>;
  signUpMethod: String;
  accessToken: String;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  publishedAt?: Maybe<DateTimeInput>;
  upvotes?: Maybe<UpvoteCreateManyWithoutPostInput>;
  upvotesNumber?: Maybe<Int>;
  authorId: String;
  categories?: Maybe<CategoryCreateManyWithoutPostsInput>;
  thumbnail: Json;
  status: PostStatus;
  slug: String;
}

export interface CategoryCreateManyWithoutPostsInput {
  create?: Maybe<
    CategoryCreateWithoutPostsInput[] | CategoryCreateWithoutPostsInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  text: String;
  category: CategoryEnum;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  socialId: String;
  fname: String;
  lname: String;
  username: String;
  name: String;
  phone?: Maybe<String>;
  email: String;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  upvotes?: Maybe<UpvoteCreateManyWithoutUserInput>;
  bio?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  profilePicture: String;
  followers?: Maybe<UserCreateManyInput>;
  previledge?: Maybe<UserCreatepreviledgeInput>;
  signUpMethod: String;
  accessToken: String;
}

export interface UpvoteCreateManyWithoutUserInput {
  create?: Maybe<UpvoteCreateWithoutUserInput[] | UpvoteCreateWithoutUserInput>;
  connect?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
}

export interface UpvoteCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  post: PostCreateOneWithoutUpvotesInput;
}

export interface PostCreateOneWithoutUpvotesInput {
  create?: Maybe<PostCreateWithoutUpvotesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutUpvotesInput {
  id?: Maybe<ID_Input>;
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  publishedAt?: Maybe<DateTimeInput>;
  upvotesNumber?: Maybe<Int>;
  author?: Maybe<UserCreateOneWithoutPostsInput>;
  authorId: String;
  categories?: Maybe<CategoryCreateManyWithoutPostsInput>;
  thumbnail: Json;
  status: PostStatus;
  slug: String;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  socialId: String;
  fname: String;
  lname: String;
  username: String;
  name: String;
  phone?: Maybe<String>;
  email: String;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  upvotes?: Maybe<UpvoteCreateManyWithoutUserInput>;
  bio?: Maybe<String>;
  profilePicture: String;
  followers?: Maybe<UserCreateManyInput>;
  previledge?: Maybe<UserCreatepreviledgeInput>;
  signUpMethod: String;
  accessToken: String;
}

export interface UserCreatepreviledgeInput {
  set?: Maybe<Previledge[] | Previledge>;
}

export interface CategoryUpdateInput {
  text?: Maybe<String>;
  category?: Maybe<CategoryEnum>;
  posts?: Maybe<PostUpdateManyWithoutCategoriesInput>;
}

export interface PostUpdateManyWithoutCategoriesInput {
  create?: Maybe<
    PostCreateWithoutCategoriesInput[] | PostCreateWithoutCategoriesInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutCategoriesInput[]
    | PostUpdateWithWhereUniqueWithoutCategoriesInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutCategoriesInput[]
    | PostUpsertWithWhereUniqueWithoutCategoriesInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutCategoriesInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutCategoriesDataInput;
}

export interface PostUpdateWithoutCategoriesDataInput {
  title?: Maybe<String>;
  editorSerializedOutput?: Maybe<Json>;
  editorCurrentContent?: Maybe<Json>;
  publishedAt?: Maybe<DateTimeInput>;
  upvotes?: Maybe<UpvoteUpdateManyWithoutPostInput>;
  upvotesNumber?: Maybe<Int>;
  author?: Maybe<UserUpdateOneWithoutPostsInput>;
  authorId?: Maybe<String>;
  thumbnail?: Maybe<Json>;
  status?: Maybe<PostStatus>;
  slug?: Maybe<String>;
}

export interface UpvoteUpdateManyWithoutPostInput {
  create?: Maybe<UpvoteCreateWithoutPostInput[] | UpvoteCreateWithoutPostInput>;
  delete?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
  connect?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
  set?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
  disconnect?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
  update?: Maybe<
    | UpvoteUpdateWithWhereUniqueWithoutPostInput[]
    | UpvoteUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | UpvoteUpsertWithWhereUniqueWithoutPostInput[]
    | UpvoteUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<UpvoteScalarWhereInput[] | UpvoteScalarWhereInput>;
}

export interface UpvoteUpdateWithWhereUniqueWithoutPostInput {
  where: UpvoteWhereUniqueInput;
  data: UpvoteUpdateWithoutPostDataInput;
}

export interface UpvoteUpdateWithoutPostDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutUpvotesInput>;
}

export interface UserUpdateOneRequiredWithoutUpvotesInput {
  create?: Maybe<UserCreateWithoutUpvotesInput>;
  update?: Maybe<UserUpdateWithoutUpvotesDataInput>;
  upsert?: Maybe<UserUpsertWithoutUpvotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutUpvotesDataInput {
  socialId?: Maybe<String>;
  fname?: Maybe<String>;
  lname?: Maybe<String>;
  username?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  bio?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  profilePicture?: Maybe<String>;
  followers?: Maybe<UserUpdateManyInput>;
  previledge?: Maybe<UserUpdatepreviledgeInput>;
  signUpMethod?: Maybe<String>;
  accessToken?: Maybe<String>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  editorSerializedOutput?: Maybe<Json>;
  editorCurrentContent?: Maybe<Json>;
  publishedAt?: Maybe<DateTimeInput>;
  upvotes?: Maybe<UpvoteUpdateManyWithoutPostInput>;
  upvotesNumber?: Maybe<Int>;
  authorId?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutPostsInput>;
  thumbnail?: Maybe<Json>;
  status?: Maybe<PostStatus>;
  slug?: Maybe<String>;
}

export interface CategoryUpdateManyWithoutPostsInput {
  create?: Maybe<
    CategoryCreateWithoutPostsInput[] | CategoryCreateWithoutPostsInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutPostsInput[]
    | CategoryUpdateWithWhereUniqueWithoutPostsInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutPostsInput[]
    | CategoryUpsertWithWhereUniqueWithoutPostsInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutPostsInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutPostsDataInput;
}

export interface CategoryUpdateWithoutPostsDataInput {
  text?: Maybe<String>;
  category?: Maybe<CategoryEnum>;
}

export interface CategoryUpsertWithWhereUniqueWithoutPostsInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutPostsDataInput;
  create: CategoryCreateWithoutPostsInput;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  category?: Maybe<CategoryEnum>;
  category_not?: Maybe<CategoryEnum>;
  category_in?: Maybe<CategoryEnum[] | CategoryEnum>;
  category_not_in?: Maybe<CategoryEnum[] | CategoryEnum>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CategoryUpdateManyDataInput {
  text?: Maybe<String>;
  category?: Maybe<CategoryEnum>;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  publishedAt?: Maybe<DateTimeInput>;
  publishedAt_not?: Maybe<DateTimeInput>;
  publishedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_lt?: Maybe<DateTimeInput>;
  publishedAt_lte?: Maybe<DateTimeInput>;
  publishedAt_gt?: Maybe<DateTimeInput>;
  publishedAt_gte?: Maybe<DateTimeInput>;
  upvotesNumber?: Maybe<Int>;
  upvotesNumber_not?: Maybe<Int>;
  upvotesNumber_in?: Maybe<Int[] | Int>;
  upvotesNumber_not_in?: Maybe<Int[] | Int>;
  upvotesNumber_lt?: Maybe<Int>;
  upvotesNumber_lte?: Maybe<Int>;
  upvotesNumber_gt?: Maybe<Int>;
  upvotesNumber_gte?: Maybe<Int>;
  authorId?: Maybe<String>;
  authorId_not?: Maybe<String>;
  authorId_in?: Maybe<String[] | String>;
  authorId_not_in?: Maybe<String[] | String>;
  authorId_lt?: Maybe<String>;
  authorId_lte?: Maybe<String>;
  authorId_gt?: Maybe<String>;
  authorId_gte?: Maybe<String>;
  authorId_contains?: Maybe<String>;
  authorId_not_contains?: Maybe<String>;
  authorId_starts_with?: Maybe<String>;
  authorId_not_starts_with?: Maybe<String>;
  authorId_ends_with?: Maybe<String>;
  authorId_not_ends_with?: Maybe<String>;
  status?: Maybe<PostStatus>;
  status_not?: Maybe<PostStatus>;
  status_in?: Maybe<PostStatus[] | PostStatus>;
  status_not_in?: Maybe<PostStatus[] | PostStatus>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  editorSerializedOutput?: Maybe<Json>;
  editorCurrentContent?: Maybe<Json>;
  publishedAt?: Maybe<DateTimeInput>;
  upvotesNumber?: Maybe<Int>;
  authorId?: Maybe<String>;
  thumbnail?: Maybe<Json>;
  status?: Maybe<PostStatus>;
  slug?: Maybe<String>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  socialId?: Maybe<String>;
  fname?: Maybe<String>;
  lname?: Maybe<String>;
  username?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  upvotes?: Maybe<UpvoteUpdateManyWithoutUserInput>;
  bio?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  profilePicture?: Maybe<String>;
  followers?: Maybe<UserUpdateManyInput>;
  previledge?: Maybe<UserUpdatepreviledgeInput>;
  signUpMethod?: Maybe<String>;
  accessToken?: Maybe<String>;
}

export interface UpvoteUpdateManyWithoutUserInput {
  create?: Maybe<UpvoteCreateWithoutUserInput[] | UpvoteCreateWithoutUserInput>;
  delete?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
  connect?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
  set?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
  disconnect?: Maybe<UpvoteWhereUniqueInput[] | UpvoteWhereUniqueInput>;
  update?: Maybe<
    | UpvoteUpdateWithWhereUniqueWithoutUserInput[]
    | UpvoteUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UpvoteUpsertWithWhereUniqueWithoutUserInput[]
    | UpvoteUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<UpvoteScalarWhereInput[] | UpvoteScalarWhereInput>;
}

export interface UpvoteUpdateWithWhereUniqueWithoutUserInput {
  where: UpvoteWhereUniqueInput;
  data: UpvoteUpdateWithoutUserDataInput;
}

export interface UpvoteUpdateWithoutUserDataInput {
  post?: Maybe<PostUpdateOneRequiredWithoutUpvotesInput>;
}

export interface PostUpdateOneRequiredWithoutUpvotesInput {
  create?: Maybe<PostCreateWithoutUpvotesInput>;
  update?: Maybe<PostUpdateWithoutUpvotesDataInput>;
  upsert?: Maybe<PostUpsertWithoutUpvotesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutUpvotesDataInput {
  title?: Maybe<String>;
  editorSerializedOutput?: Maybe<Json>;
  editorCurrentContent?: Maybe<Json>;
  publishedAt?: Maybe<DateTimeInput>;
  upvotesNumber?: Maybe<Int>;
  author?: Maybe<UserUpdateOneWithoutPostsInput>;
  authorId?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutPostsInput>;
  thumbnail?: Maybe<Json>;
  status?: Maybe<PostStatus>;
  slug?: Maybe<String>;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  socialId?: Maybe<String>;
  fname?: Maybe<String>;
  lname?: Maybe<String>;
  username?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  upvotes?: Maybe<UpvoteUpdateManyWithoutUserInput>;
  bio?: Maybe<String>;
  profilePicture?: Maybe<String>;
  followers?: Maybe<UserUpdateManyInput>;
  previledge?: Maybe<UserUpdatepreviledgeInput>;
  signUpMethod?: Maybe<String>;
  accessToken?: Maybe<String>;
}

export interface UserUpdatepreviledgeInput {
  set?: Maybe<Previledge[] | Previledge>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutUpvotesInput {
  update: PostUpdateWithoutUpvotesDataInput;
  create: PostCreateWithoutUpvotesInput;
}

export interface UpvoteUpsertWithWhereUniqueWithoutUserInput {
  where: UpvoteWhereUniqueInput;
  update: UpvoteUpdateWithoutUserDataInput;
  create: UpvoteCreateWithoutUserInput;
}

export interface UpvoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UpvoteScalarWhereInput[] | UpvoteScalarWhereInput>;
  OR?: Maybe<UpvoteScalarWhereInput[] | UpvoteScalarWhereInput>;
  NOT?: Maybe<UpvoteScalarWhereInput[] | UpvoteScalarWhereInput>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  socialId?: Maybe<String>;
  socialId_not?: Maybe<String>;
  socialId_in?: Maybe<String[] | String>;
  socialId_not_in?: Maybe<String[] | String>;
  socialId_lt?: Maybe<String>;
  socialId_lte?: Maybe<String>;
  socialId_gt?: Maybe<String>;
  socialId_gte?: Maybe<String>;
  socialId_contains?: Maybe<String>;
  socialId_not_contains?: Maybe<String>;
  socialId_starts_with?: Maybe<String>;
  socialId_not_starts_with?: Maybe<String>;
  socialId_ends_with?: Maybe<String>;
  socialId_not_ends_with?: Maybe<String>;
  fname?: Maybe<String>;
  fname_not?: Maybe<String>;
  fname_in?: Maybe<String[] | String>;
  fname_not_in?: Maybe<String[] | String>;
  fname_lt?: Maybe<String>;
  fname_lte?: Maybe<String>;
  fname_gt?: Maybe<String>;
  fname_gte?: Maybe<String>;
  fname_contains?: Maybe<String>;
  fname_not_contains?: Maybe<String>;
  fname_starts_with?: Maybe<String>;
  fname_not_starts_with?: Maybe<String>;
  fname_ends_with?: Maybe<String>;
  fname_not_ends_with?: Maybe<String>;
  lname?: Maybe<String>;
  lname_not?: Maybe<String>;
  lname_in?: Maybe<String[] | String>;
  lname_not_in?: Maybe<String[] | String>;
  lname_lt?: Maybe<String>;
  lname_lte?: Maybe<String>;
  lname_gt?: Maybe<String>;
  lname_gte?: Maybe<String>;
  lname_contains?: Maybe<String>;
  lname_not_contains?: Maybe<String>;
  lname_starts_with?: Maybe<String>;
  lname_not_starts_with?: Maybe<String>;
  lname_ends_with?: Maybe<String>;
  lname_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  birthday?: Maybe<String>;
  birthday_not?: Maybe<String>;
  birthday_in?: Maybe<String[] | String>;
  birthday_not_in?: Maybe<String[] | String>;
  birthday_lt?: Maybe<String>;
  birthday_lte?: Maybe<String>;
  birthday_gt?: Maybe<String>;
  birthday_gte?: Maybe<String>;
  birthday_contains?: Maybe<String>;
  birthday_not_contains?: Maybe<String>;
  birthday_starts_with?: Maybe<String>;
  birthday_not_starts_with?: Maybe<String>;
  birthday_ends_with?: Maybe<String>;
  birthday_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  profilePicture?: Maybe<String>;
  profilePicture_not?: Maybe<String>;
  profilePicture_in?: Maybe<String[] | String>;
  profilePicture_not_in?: Maybe<String[] | String>;
  profilePicture_lt?: Maybe<String>;
  profilePicture_lte?: Maybe<String>;
  profilePicture_gt?: Maybe<String>;
  profilePicture_gte?: Maybe<String>;
  profilePicture_contains?: Maybe<String>;
  profilePicture_not_contains?: Maybe<String>;
  profilePicture_starts_with?: Maybe<String>;
  profilePicture_not_starts_with?: Maybe<String>;
  profilePicture_ends_with?: Maybe<String>;
  profilePicture_not_ends_with?: Maybe<String>;
  signUpMethod?: Maybe<String>;
  signUpMethod_not?: Maybe<String>;
  signUpMethod_in?: Maybe<String[] | String>;
  signUpMethod_not_in?: Maybe<String[] | String>;
  signUpMethod_lt?: Maybe<String>;
  signUpMethod_lte?: Maybe<String>;
  signUpMethod_gt?: Maybe<String>;
  signUpMethod_gte?: Maybe<String>;
  signUpMethod_contains?: Maybe<String>;
  signUpMethod_not_contains?: Maybe<String>;
  signUpMethod_starts_with?: Maybe<String>;
  signUpMethod_not_starts_with?: Maybe<String>;
  signUpMethod_ends_with?: Maybe<String>;
  signUpMethod_not_ends_with?: Maybe<String>;
  accessToken?: Maybe<String>;
  accessToken_not?: Maybe<String>;
  accessToken_in?: Maybe<String[] | String>;
  accessToken_not_in?: Maybe<String[] | String>;
  accessToken_lt?: Maybe<String>;
  accessToken_lte?: Maybe<String>;
  accessToken_gt?: Maybe<String>;
  accessToken_gte?: Maybe<String>;
  accessToken_contains?: Maybe<String>;
  accessToken_not_contains?: Maybe<String>;
  accessToken_starts_with?: Maybe<String>;
  accessToken_not_starts_with?: Maybe<String>;
  accessToken_ends_with?: Maybe<String>;
  accessToken_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  socialId?: Maybe<String>;
  fname?: Maybe<String>;
  lname?: Maybe<String>;
  username?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  bio?: Maybe<String>;
  profilePicture?: Maybe<String>;
  previledge?: Maybe<UserUpdatepreviledgeInput>;
  signUpMethod?: Maybe<String>;
  accessToken?: Maybe<String>;
}

export interface UserUpsertWithoutUpvotesInput {
  update: UserUpdateWithoutUpvotesDataInput;
  create: UserCreateWithoutUpvotesInput;
}

export interface UpvoteUpsertWithWhereUniqueWithoutPostInput {
  where: UpvoteWhereUniqueInput;
  update: UpvoteUpdateWithoutPostDataInput;
  create: UpvoteCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutCategoriesInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutCategoriesDataInput;
  create: PostCreateWithoutCategoriesInput;
}

export interface CategoryUpdateManyMutationInput {
  text?: Maybe<String>;
  category?: Maybe<CategoryEnum>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  publishedAt?: Maybe<DateTimeInput>;
  upvotes?: Maybe<UpvoteCreateManyWithoutPostInput>;
  upvotesNumber?: Maybe<Int>;
  author?: Maybe<UserCreateOneWithoutPostsInput>;
  authorId: String;
  categories?: Maybe<CategoryCreateManyWithoutPostsInput>;
  thumbnail: Json;
  status: PostStatus;
  slug: String;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  editorSerializedOutput?: Maybe<Json>;
  editorCurrentContent?: Maybe<Json>;
  publishedAt?: Maybe<DateTimeInput>;
  upvotes?: Maybe<UpvoteUpdateManyWithoutPostInput>;
  upvotesNumber?: Maybe<Int>;
  author?: Maybe<UserUpdateOneWithoutPostsInput>;
  authorId?: Maybe<String>;
  categories?: Maybe<CategoryUpdateManyWithoutPostsInput>;
  thumbnail?: Maybe<Json>;
  status?: Maybe<PostStatus>;
  slug?: Maybe<String>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  editorSerializedOutput?: Maybe<Json>;
  editorCurrentContent?: Maybe<Json>;
  publishedAt?: Maybe<DateTimeInput>;
  upvotesNumber?: Maybe<Int>;
  authorId?: Maybe<String>;
  thumbnail?: Maybe<Json>;
  status?: Maybe<PostStatus>;
  slug?: Maybe<String>;
}

export interface UpvoteCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutUpvotesInput;
  post: PostCreateOneWithoutUpvotesInput;
}

export interface UpvoteUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutUpvotesInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutUpvotesInput>;
}

export interface UserUpdateInput {
  socialId?: Maybe<String>;
  fname?: Maybe<String>;
  lname?: Maybe<String>;
  username?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  upvotes?: Maybe<UpvoteUpdateManyWithoutUserInput>;
  bio?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  profilePicture?: Maybe<String>;
  followers?: Maybe<UserUpdateManyInput>;
  previledge?: Maybe<UserUpdatepreviledgeInput>;
  signUpMethod?: Maybe<String>;
  accessToken?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  socialId?: Maybe<String>;
  fname?: Maybe<String>;
  lname?: Maybe<String>;
  username?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  gender?: Maybe<String>;
  birthday?: Maybe<String>;
  bio?: Maybe<String>;
  profilePicture?: Maybe<String>;
  previledge?: Maybe<UserUpdatepreviledgeInput>;
  signUpMethod?: Maybe<String>;
  accessToken?: Maybe<String>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UpvoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UpvoteWhereInput>;
  AND?: Maybe<UpvoteSubscriptionWhereInput[] | UpvoteSubscriptionWhereInput>;
  OR?: Maybe<UpvoteSubscriptionWhereInput[] | UpvoteSubscriptionWhereInput>;
  NOT?: Maybe<UpvoteSubscriptionWhereInput[] | UpvoteSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Category {
  id: ID_Output;
  text: String;
  category: CategoryEnum;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  category: () => Promise<CategoryEnum>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<CategoryEnum>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  category: () => Promise<CategoryEnum>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  publishedAt?: DateTimeOutput;
  upvotesNumber?: Int;
  authorId: String;
  thumbnail: Json;
  status: PostStatus;
  slug: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  editorSerializedOutput: () => Promise<Json>;
  editorCurrentContent: () => Promise<Json>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  publishedAt: () => Promise<DateTimeOutput>;
  upvotes: <T = FragmentableArray<Upvote>>(args?: {
    where?: UpvoteWhereInput;
    orderBy?: UpvoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  upvotesNumber: () => Promise<Int>;
  author: <T = UserPromise>() => T;
  authorId: () => Promise<String>;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  thumbnail: () => Promise<Json>;
  status: () => Promise<PostStatus>;
  slug: () => Promise<String>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  editorSerializedOutput: () => Promise<AsyncIterator<Json>>;
  editorCurrentContent: () => Promise<AsyncIterator<Json>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  upvotes: <T = Promise<AsyncIterator<UpvoteSubscription>>>(args?: {
    where?: UpvoteWhereInput;
    orderBy?: UpvoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  upvotesNumber: () => Promise<AsyncIterator<Int>>;
  author: <T = UserSubscription>() => T;
  authorId: () => Promise<AsyncIterator<String>>;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  thumbnail: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<PostStatus>>;
  slug: () => Promise<AsyncIterator<String>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  editorSerializedOutput: () => Promise<Json>;
  editorCurrentContent: () => Promise<Json>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  publishedAt: () => Promise<DateTimeOutput>;
  upvotes: <T = FragmentableArray<Upvote>>(args?: {
    where?: UpvoteWhereInput;
    orderBy?: UpvoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  upvotesNumber: () => Promise<Int>;
  author: <T = UserPromise>() => T;
  authorId: () => Promise<String>;
  categories: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  thumbnail: () => Promise<Json>;
  status: () => Promise<PostStatus>;
  slug: () => Promise<String>;
}

export interface Upvote {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UpvotePromise extends Promise<Upvote>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UpvoteSubscription
  extends Promise<AsyncIterator<Upvote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UpvoteNullablePromise
  extends Promise<Upvote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  socialId: String;
  fname: String;
  lname: String;
  username: String;
  name: String;
  phone?: String;
  email: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  profilePicture: String;
  previledge: Previledge[];
  signUpMethod: String;
  accessToken: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  socialId: () => Promise<String>;
  fname: () => Promise<String>;
  lname: () => Promise<String>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  gender: () => Promise<String>;
  birthday: () => Promise<String>;
  upvotes: <T = FragmentableArray<Upvote>>(args?: {
    where?: UpvoteWhereInput;
    orderBy?: UpvoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bio: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profilePicture: () => Promise<String>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  previledge: () => Promise<Previledge[]>;
  signUpMethod: () => Promise<String>;
  accessToken: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  socialId: () => Promise<AsyncIterator<String>>;
  fname: () => Promise<AsyncIterator<String>>;
  lname: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<String>>;
  upvotes: <T = Promise<AsyncIterator<UpvoteSubscription>>>(args?: {
    where?: UpvoteWhereInput;
    orderBy?: UpvoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bio: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profilePicture: () => Promise<AsyncIterator<String>>;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  previledge: () => Promise<AsyncIterator<Previledge[]>>;
  signUpMethod: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  socialId: () => Promise<String>;
  fname: () => Promise<String>;
  lname: () => Promise<String>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  gender: () => Promise<String>;
  birthday: () => Promise<String>;
  upvotes: <T = FragmentableArray<Upvote>>(args?: {
    where?: UpvoteWhereInput;
    orderBy?: UpvoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  bio: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  profilePicture: () => Promise<String>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  previledge: () => Promise<Previledge[]>;
  signUpMethod: () => Promise<String>;
  accessToken: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UpvoteConnection {
  pageInfo: PageInfo;
  edges: UpvoteEdge[];
}

export interface UpvoteConnectionPromise
  extends Promise<UpvoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UpvoteEdge>>() => T;
  aggregate: <T = AggregateUpvotePromise>() => T;
}

export interface UpvoteConnectionSubscription
  extends Promise<AsyncIterator<UpvoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UpvoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUpvoteSubscription>() => T;
}

export interface UpvoteEdge {
  node: Upvote;
  cursor: String;
}

export interface UpvoteEdgePromise extends Promise<UpvoteEdge>, Fragmentable {
  node: <T = UpvotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UpvoteEdgeSubscription
  extends Promise<AsyncIterator<UpvoteEdge>>,
    Fragmentable {
  node: <T = UpvoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUpvote {
  count: Int;
}

export interface AggregateUpvotePromise
  extends Promise<AggregateUpvote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUpvoteSubscription
  extends Promise<AsyncIterator<AggregateUpvote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  text: String;
  category: CategoryEnum;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  category: () => Promise<CategoryEnum>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<CategoryEnum>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  editorSerializedOutput: Json;
  editorCurrentContent: Json;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  publishedAt?: DateTimeOutput;
  upvotesNumber?: Int;
  authorId: String;
  thumbnail: Json;
  status: PostStatus;
  slug: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  editorSerializedOutput: () => Promise<Json>;
  editorCurrentContent: () => Promise<Json>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  publishedAt: () => Promise<DateTimeOutput>;
  upvotesNumber: () => Promise<Int>;
  authorId: () => Promise<String>;
  thumbnail: () => Promise<Json>;
  status: () => Promise<PostStatus>;
  slug: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  editorSerializedOutput: () => Promise<AsyncIterator<Json>>;
  editorCurrentContent: () => Promise<AsyncIterator<Json>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  upvotesNumber: () => Promise<AsyncIterator<Int>>;
  authorId: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<PostStatus>>;
  slug: () => Promise<AsyncIterator<String>>;
}

export interface UpvoteSubscriptionPayload {
  mutation: MutationType;
  node: Upvote;
  updatedFields: String[];
  previousValues: UpvotePreviousValues;
}

export interface UpvoteSubscriptionPayloadPromise
  extends Promise<UpvoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UpvotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UpvotePreviousValuesPromise>() => T;
}

export interface UpvoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UpvoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UpvoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UpvotePreviousValuesSubscription>() => T;
}

export interface UpvotePreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UpvotePreviousValuesPromise
  extends Promise<UpvotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UpvotePreviousValuesSubscription
  extends Promise<AsyncIterator<UpvotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  socialId: String;
  fname: String;
  lname: String;
  username: String;
  name: String;
  phone?: String;
  email: String;
  gender?: String;
  birthday?: String;
  bio?: String;
  profilePicture: String;
  previledge: Previledge[];
  signUpMethod: String;
  accessToken: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  socialId: () => Promise<String>;
  fname: () => Promise<String>;
  lname: () => Promise<String>;
  username: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  gender: () => Promise<String>;
  birthday: () => Promise<String>;
  bio: () => Promise<String>;
  profilePicture: () => Promise<String>;
  previledge: () => Promise<Previledge[]>;
  signUpMethod: () => Promise<String>;
  accessToken: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  socialId: () => Promise<AsyncIterator<String>>;
  fname: () => Promise<AsyncIterator<String>>;
  lname: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  previledge: () => Promise<AsyncIterator<Previledge[]>>;
  signUpMethod: () => Promise<AsyncIterator<String>>;
  accessToken: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Json = any;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Previledge",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "CategoryEnum",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "PostStatus",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Upvote",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
